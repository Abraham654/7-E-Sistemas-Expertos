import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../utils'))

from knowledge_acquisition import KnowledgeAcquisition

class KnowledgeChatbot:
    def __init__(self):
        self.knowledge = KnowledgeAcquisition()
        print("ü§ñ Sistema de Adquisici√≥n de Conocimiento Inicializado")
        print(f"üíæ Base de conocimiento: {sum(len(v) for v in self.knowledge.knowledge.values())} items")
    
    def start_chat(self):
        """Inicia el chat interactivo de adquisici√≥n de conocimiento"""
        print("\n" + "="*60)
        print("           SISTEMA DE ADQUISICI√ìN DE CONOCIMIENTO")
        print("="*60)
        print("Escribe 'salir' para terminar la conversaci√≥n\n")
        print("¬°Hola! Soy un sistema que aprende contigo. Puedes ense√±arme")
        print("cualquier tema pregunt√°ndome sobre ello.\n")
        
        while True:
            try:
                user_input = input("üë§ T√∫: ").strip()
                
                if user_input.lower() in ['salir', 'exit', 'quit', 'adios']:
                    print("ü§ñ ¬°Gracias por ense√±arme! Hasta pronto. üìö")
                    break
                
                response = self.get_response(user_input)
                print(f"ü§ñ Sistema: {response}")
                
            except KeyboardInterrupt:
                print("\nü§ñ Conversaci√≥n interrumpida. ¬°Hasta pronto!")
                break
            except Exception as e:
                print(f"ü§ñ Error: {e}")
    
    def get_response(self, question: str) -> str:
        """Obtiene respuesta o adquiere nuevo conocimiento"""
        if not question:
            return "Por favor, hazme una pregunta o cu√©ntame algo."
        
        # Buscar respuesta existente
        answer = self.knowledge.find_answer(question)
        
        if answer:
            return answer
        else:
            # Adquirir nuevo conocimiento
            return self.knowledge.acquire_new_knowledge(question)